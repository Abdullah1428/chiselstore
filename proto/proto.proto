syntax = "proto3";

package proto;

message Void {
}

message Query {
    string sql = 1;
}

message QueryResults {
    repeated QueryRow rows = 1;
}

message QueryRow {
    repeated string values = 1;
}

// changes for omni paxos replacement
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
message BallotObject {
    uint32 n = 1;
    uint64 priority = 2;
    uint64 pid = 3;
}

message HeartbeatRequestObject {
    uint32 round = 1;
}

message HeartbeatReplyObject {
    uint32 round = 1;
    BallotObject ballot = 2;
    bool majority_connected = 3;
}

message BleMessageObject {
    uint64 from = 1;
    uint64 to = 2;
    oneof msg {
        HeartbeatRequestObject heartbeat_req = 3;
        HeartbeatReplyObject heartbeat_rep = 4;
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Omni Paxos storage.rs, util.rs and messages.rs
// preparing messages for SyncItem = Item used for log synchronization in the Prepare phase.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
message StoreCommandObject {
    uint64 id = 1; 
    string sql = 2;
}

// enum SnapshotEnum {
//     Complete = 0;
//     Delta = 1;
//     Phantom = 2;
// }

// message Snapshot {
//     SnapshotEnum t = 1;
//     map<uint64, string> s = 2;
// }

message SyncItemObject {
    oneof item {
        Entries entries = 1;
        Snapshot snapshot = 2;
        None none = 3;
    }
    message Entries {
        repeated StoreCommandObject vec = 1;
    }
    enum Snapshot {
        Complete = 0;
        Delta = 1;
        Phantom = 2;
    }
    message None {
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Prepare message sent by a newly-elected leader to initiate the Prepare phase.
message PrepareObject {
    BallotObject n = 1; // the current round
    uint64 ld = 2; // The decided index of this leader.
    BallotObject n_accepted = 3; // The latest round in which an entry was accepted.
    uint64 la = 4; // The log length of this leader.
}

// A StopSign entry that marks the end of a configuration. Used for reconfiguration.
message StopSignObject {
    uint32 config_id = 1;
    repeated uint64 nodes = 2;
    optional Metadata metadata = 3;
    message Metadata {
        repeated uint32 vec = 1;
    }
}

// Promise message sent by a follower in response to a [`Prepare`] sent by the leader.
message PromiseObject {
    BallotObject n = 1; // The current round.
    BallotObject n_accepted = 2; // The latest round in which an entry was accepted.
    optional SyncItemObject sync_item = 3; // The suffix of missing entries at the leader.
    uint64 ld = 4; // The decided index of this follower.
    uint64 la = 5; // The log length of this follower.
    optional StopSignObject stopsign = 6; // The StopSign accepted by this follower
}

// AcceptSync message sent by the leader to synchronize the logs of all replicas in the prepare phase.
message AcceptSyncObject {
    BallotObject n = 1; // The current round.
    SyncItemObject sync_item = 2; // Entries that the receiving replica is missing in its log.
    uint64 sync_idx = 3; // The index of the log where the entries from `sync_item` should be applied at or the compacted idx
    optional uint64 decide_idx = 4; // The decided index
    optional StopSignObject stopsign = 5; // StopSign to be accepted
}

// The first accept message sent. Only used by a pre-elected leader after reconfiguration.
message FirstAcceptObject {
    BallotObject n = 1;
    repeated StoreCommandObject entries = 2;
}

// Message with entries to be replicated and the latest decided index sent by the leader in the accept phase.
message AcceptDecideObject {
    BallotObject n = 1;
    uint64 ld = 2;
    repeated StoreCommandObject entries = 3; // Entries to be replicated.
}

// Message sent by follower to leader when entries has been accepted.
message AcceptedObject {
    BallotObject n = 1; // The current round.
    uint64 la = 2; // The accepted index.
}

// Message sent by leader to followers to decide up to a certain index in the log.
message DecideObject {
    BallotObject n = 1;
    uint64 ld = 2; // The decided index.
}

// Message sent by leader to followers to accept a StopSign
message AcceptStopSignObject {
    BallotObject n = 1;
    StopSignObject ss = 2; // The decided index.
}

// Message sent by followers to leader when accepted StopSign
message AcceptedStopSignObject {
    BallotObject n = 1; // The current round.
}

// Message sent by leader to decide a StopSign
message DecideStopSignObject {
    BallotObject n = 1;
}

// Compaction Request
message CompactionObject {
    oneof compaction {
        Trim trim = 1;
        uint64 snapshot = 2;
    }
    message Trim {
        optional uint64 trim = 1;
    }
}

message ProposalForwardObject {
    repeated StoreCommandObject entries = 1;
}

message PrepareReqObject {
}

// An enum for all the different message types.
message PaxosMsgObject {
    uint64 from = 1;
    uint64 to = 2;
    oneof msg {
        // Request a [`Prepare`] to be sent from the leader. Used for fail-recovery.
        PrepareReqObject prepare_req = 3;
        PrepareObject prepare = 4;
        PromiseObject promise = 5;
        AcceptSyncObject accept_sync = 6;
        FirstAcceptObject first_accept = 7;
        AcceptDecideObject accept_decide = 8;
        AcceptedObject accepted = 9;
        DecideObject decide = 10;
        // Forward client proposals to the leader.
        ProposalForwardObject proposal_forward = 11;
        CompactionObject compaction = 12;
        CompactionObject forward_compaction = 13;
        AcceptStopSignObject accept_stop_sign = 14;
        AcceptedStopSignObject accepted_stop_sign = 15;
        DecideStopSignObject decide_stop_sign = 16;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// this service shows how the interface of RPC Network structure should look like
service RPC {
    // execute sql query
    rpc Execute(Query) returns (QueryResults);
    // for ballot leader election
    rpc Blemessage(BleMessageObject) returns (Void);
    // for sequence paxos
    rpc Spmessage(PaxosMsgObject) returns (Void);
}
